// alpha_render_system_opengl.cc

#include "alpha_render_system_opengl.h"
#include "alpha_service_locator.h"

#define WIN32_LEAN_AND_MEAN
#include <Windows.h>
#include <gl/GL.h>

static void 
opengl_default_settings() {
   glDisable(GL_DEPTH_TEST);
   glEnable(GL_BLEND);
   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
   glEnable(GL_TEXTURE_2D);
   glFrontFace(GL_CW);
   glEnableClientState(GL_VERTEX_ARRAY);
   glEnableClientState(GL_TEXTURE_COORD_ARRAY);
}

static void 
opengl_projection(int width, int height) {
   glViewport(0, 0, width, height);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho(0, (GLdouble)width, (GLdouble)height, 0.0, -1.0, 1.0);
   glMatrixMode(GL_MODELVIEW);
   glLoadIdentity();
}

namespace alpha {
   namespace {
      struct vertex {
         vector2 pos_;
         vector2 tex_;
      };

      void opengl_transform(const transform &transform) {
         glLoadIdentity();
         glTranslatef(transform.position_.x_, transform.position_.y_, 0.0f);
         glRotatef(transform.rotation_, 0.0f, 0.0f, 1.0f);
         glScalef(transform.scale_.x_, transform.scale_.y_, 1.0f);
         glTranslatef(-transform.origin_.x_, -transform.origin_.y_, 0.0f);
      }

      void opengl_bind(const texture *image) {
         glBindTexture(GL_TEXTURE_2D, image ? image->handle_ : 0);
      }

      void opengl_render(int start, int count, const vertex *vertices) {
         const uint8 *base = (const uint8 *)vertices;
         glVertexPointer(2, GL_FLOAT, sizeof(vertex), (const GLvoid *)(base + offsetof(vertex, pos_)));
         glTexCoordPointer(2, GL_FLOAT, sizeof(vertex), (const GLvoid *)(base + offsetof(vertex, tex_)));
         glDrawArrays(GL_QUADS, start, count);
      }

      void set_pixel(int width, int height, uint32 *dst, int x, int y, uint32 src) {
         if (x < 0 || x >= width) return;
         if (y < 0 || y >= height) return;
         dst[y * width + x] = src;
      }

      void blit_glyphs(int width, int height, uint32 *bitmap) {
         // Source:
         // - https://github.com/dhepper/font8x8
         //
         // license: 
         // - Public Domain
         //
         const unsigned char font8x8_basic[][8] = {
            { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // U+0021 (!)
            { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0022 (")
            { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // U+0023 (#)
            { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // U+0024 ($)
            { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // U+0025 (%)
            { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // U+0026 (&)
            { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0027 (')
            { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // U+0028 (()
            { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // U+0029 ())
            { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // U+002A (*)
            { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // U+002B (+)
            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+002C (,)
            { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // U+002D (-)
            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+002E (.)
            { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // U+002F (/)
            { 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},   // U+0030 (0)
            { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},   // U+0031 (1)
            { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},   // U+0032 (2)
            { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // U+0033 (3)
            { 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00},   // U+0034 (4)
            { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},   // U+0035 (5)
            { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},   // U+0036 (6)
            { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},   // U+0037 (7)
            { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},   // U+0038 (8)
            { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // U+0039 (9)
            { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+003A (:)
            { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+003B (//)
            { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // U+003C (<)
            { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // U+003D (=)
            { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // U+003E (>)
            { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // U+003F (?)
            { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // U+0040 (@)
            { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},   // U+0041 (A)
            { 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00},   // U+0042 (B)
            { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},   // U+0043 (C)
            { 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00},   // U+0044 (D)
            { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},   // U+0045 (E)
            { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},   // U+0046 (F)
            { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},   // U+0047 (G)
            { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},   // U+0048 (H)
            { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0049 (I)
            { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},   // U+004A (J)
            { 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00},   // U+004B (K)
            { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},   // U+004C (L)
            { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},   // U+004D (M)
            { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},   // U+004E (N)
            { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},   // U+004F (O)
            { 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00},   // U+0050 (P)
            { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},   // U+0051 (Q)
            { 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00},   // U+0052 (R)
            { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},   // U+0053 (S)
            { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0054 (T)
            { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},   // U+0055 (U)
            { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0056 (V)
            { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},   // U+0057 (W)
            { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},   // U+0058 (X)
            { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},   // U+0059 (Y)
            { 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00},   // U+005A (Z)
            { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // U+005B ([)
            { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // U+005C (\)
            { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // U+005D (])
            { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // U+005E (^)
            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+005F (_)
            { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0060 (`)
            { 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00},   // U+0061 (a)
            { 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00},   // U+0062 (b)
            { 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00},   // U+0063 (c)
            { 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00},   // U+0064 (d)
            { 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00},   // U+0065 (e)
            { 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00},   // U+0066 (f)
            { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0067 (g)
            { 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00},   // U+0068 (h)
            { 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0069 (i)
            { 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E},   // U+006A (j)
            { 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00},   // U+006B (k)
            { 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+006C (l)
            { 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00},   // U+006D (m)
            { 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00},   // U+006E (n)
            { 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00},   // U+006F (o)
            { 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F},   // U+0070 (p)
            { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78},   // U+0071 (q)
            { 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00},   // U+0072 (r)
            { 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00},   // U+0073 (s)
            { 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00},   // U+0074 (t)
            { 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00},   // U+0075 (u)
            { 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0076 (v)
            { 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00},   // U+0077 (w)
            { 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00},   // U+0078 (x)
            { 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0079 (y)
            { 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00},   // U+007A (z)
            { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},   // U+007B ({)
            { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},   // U+007C (|)
            { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},   // U+007D (})
            { 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+007E (~)
            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+007F
         };

         const int glyph_atlas_columns = 16;
         const int glyph_atlas_rows = 8;
         const int glyph_count = (sizeof(font8x8_basic) / sizeof(font8x8_basic[0]));
         for (int glyph = 0; glyph < glyph_count; glyph++) {
            const int glyph_x = glyph % glyph_atlas_columns * 8;
            const int glyph_y = glyph / glyph_atlas_columns * 8;

            for (int y = 0; y < 8; y++) {
               for (int x = 0; x < 8; x++) {
                  if (font8x8_basic[glyph][y] & 1 << x)
                     set_pixel(width, height, bitmap, glyph_x + x, glyph_y + y, 0xffffffff);
                  else
                     set_pixel(width, height, bitmap, glyph_x + x, glyph_y + y, 0x00000000);
               }
            }
         }

         set_pixel(width, height, bitmap, width - 1, height - 1, 0xffffffff);
      }
   } // !anon

   render_system_opengl::render_system_opengl()
   {
      uint32 *bitmap = new uint32[16384];
      blit_glyphs(128, 128, bitmap);
      debug_font_texture_.create_from_memory(128, 128, bitmap);
      delete[] bitmap;

      opengl_default_settings();
   }

   render_system_opengl::~render_system_opengl()
   {
      debug_font_texture_.destroy();
   }

   void render_system_opengl::make_current() {
      service_locator<render_system>::set(this);
   }

   void render_system_opengl::clear(const uint32 color) {
      glClearColor(((color >> 16) & 0xff) / 255.0f, 
                   ((color >> 8 ) & 0xff) / 255.0f, 
                   ((color >> 0 ) & 0xff) / 255.0f, 
                   ((color >> 24) & 0xff) / 255.0f);
      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
   }

   void render_system_opengl::projection(const int32 width, const int32 height) {
      opengl_projection(width, height);
   }

   void render_system_opengl::render(const sprite &sprite, const transform &transform) {
      const vector2 &dst = sprite.size_;
      const float x0 = 0.0f;
      const float y0 = 0.0f;
      const float x1 = dst.x_;
      const float y1 = dst.y_;

      const rectangle &src = sprite.source_;
      const float u0 = src.x_;
      const float v0 = src.y_;
      const float u1 = src.x_ + src.width_;
      const float v1 = src.y_ + src.height_;

      const vertex vertices[] =
      {
         { { x0, y0 }, { u0, v0 } },
         { { x1, y0 }, { u1, v0 } },
         { { x1, y1 }, { u1, v1 } },
         { { x0, y1 }, { u0, v1 } },
      };

      opengl_bind(sprite.image_);
      opengl_transform(transform);
      opengl_render(0, 4, vertices);
   }

#pragma warning(push)
#pragma warning(disable: 4244) // conversion from X to Y, possible loss of data
   void render_system_opengl::render(const text &text, const transform &transform) {
      const float uvst = 1.0f / 16.0f;
      const int character_width = 8 * text.scale_;
      const int line_feed_height = 10;
      const int first_valid_character = (int)'!';
      const int last_valid_character = (int)'~';
      const int invalid_character = (int)'?' - first_valid_character;

      opengl_bind(&debug_font_texture_);
      opengl_transform(transform);
      uint32 color = text.color_;
      glColor4f(((color >> 16) & 0xff) / 255.0f,
         ((color >> 8) & 0xff) / 255.0f,
                ((color >> 0) & 0xff) / 255.0f,
                ((color >> 24) & 0xff) / 255.0f);

      int x = 0;
      int y = 0;
      const int ox = x;
      //const int len = (int)text.text_.size();
      //for (size_t index = 0; index < len; index++) {
      for (auto &character : text.text_) {
         if (character == (' ')) {
            x += character_width;
            continue;
         }
         else if (character == ('\n')) {
            x = ox;
            y += line_feed_height;
            continue;
         }

         int character_index = character - first_valid_character;
         if (character_index < 0 || character_index >= last_valid_character) {
            character_index = invalid_character;
         }

         const float x0 = x;
         const float y0 = y;
         const float x1 = x + character_width;
         const float y1 = y + character_width;

         const float u0 = (character_index % 16) * uvst;
         const float v0 = (character_index / 16) * uvst;
         const float u1 = u0 + uvst;
         const float v1 = v0 + uvst;

         const vertex vertices[] =
         {
            { { x0, y0 }, { u0, v0 } },
            { { x1, y0 }, { u1, v0 } },
            { { x1, y1 }, { u1, v1 } },
            { { x0, y1 }, { u0, v1 } },
         };
         opengl_render(0, 4, vertices);

         x += character_width;
      }

      glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
      glBindTexture(GL_TEXTURE_2D, 0);
   }
#pragma warning(pop)
} // !alpha
